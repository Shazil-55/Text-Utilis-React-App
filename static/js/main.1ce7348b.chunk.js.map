{"version":3,"sources":["component/NavBar.js","component/TextForm.js","component/About.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","_useState","useState","mode","_useState2","_slicedToArray","setmode","React","createElement","className","concat","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","role","htmlFor","defaultProps","TextForm","text","setText","Fragment","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","cleanedText","replace","trim","textCopy","navigator","clipboard","writeText","split","length","About","color","backgroundColor","mystyle","setmystyle","_useState3","_useState4","firstmode","setfirstmode","style","aria-labelledby","data-bs-parent","App","Router","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1ce7348b.chunk.js","sourcesContent":["import React ,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\nexport default function NavBar(props) {\r\n\r\n  // ${mode===\"light\"?\"dark\":\"light\" }\r\n  const [mode, setmode] = useState(props.mode)\r\n  function changeMode()\r\n  {\r\n    if (mode==\"light\"){\r\n        setmode(\"dark\")\r\n    }\r\n    else{\r\n      setmode(\"light\")\r\n    }\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-${mode===\"light\"?\"light\":\"dark\" } navbar-expand-lg bg-${mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        {props.title}\r\n      </Link>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"collapse\"\r\n        data-bs-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/About\">\r\n              About\r\n            </Link>\r\n          </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${mode==\"dark\"?\"light\":\"dark\"}`}>\r\n        <input className=\"form-check-input\" onClick={changeMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {title: PropTypes.string}\r\nNavBar.defaultProps = {title : \"my default prop\"}","import React , {useState} from \"react\"\r\nexport default function TextForm(props) {\r\n\r\n    function clickHandler(){\r\n        console.log(\"clicked\")\r\n       let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n  \r\n    function LowerclickHandler(){\r\n      console.log(\"clicked\")\r\n     let newText = text.toLowerCase();\r\n      setText(newText)\r\n  }\r\n\r\n    function changeHandle(event){\r\n        console.log(\"changed\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n    function ExtraSpaceHandler(){\r\n      const cleanedText = text.replace(/\\s+/g, ' ').trim();\r\n      setText(cleanedText)\r\n    } \r\n\r\n    function CopyCodeHandler(){\r\n      console.log('helo');\r\n      const textCopy = text;\r\n      navigator.clipboard.writeText(textCopy)\r\n    } \r\n\r\n\r\n    function ClearHandler(event){\r\n      setText('')\r\n    }\r\n    \r\n\r\n\r\n    const [text, setText] = useState('write something'); \r\n\r\n  return (\r\n  \r\n    <>\r\n      <div className=\"container mt-4 pt-5\">\r\n        <h4>{props.heading}</h4>\r\n        <div className=\"input-group\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            aria-label=\"With textarea\"\r\n            value={text}\r\n            onChange={changeHandle}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary my-3 \" onClick={clickHandler} >Convert to UpperCase</button>\r\n       <button className=\"btn btn-secondary my-3 mx-3\" onClick={LowerclickHandler} >Convert to LowerCase</button>\r\n       <button className=\"btn btn-success my-3 mx-3\" onClick={ClearHandler} >Clear Text</button>\r\n       <button className=\"btn btn-info my-3 mx-3\" onClick={ExtraSpaceHandler} >Remove Extra spaces</button>\r\n       <button className=\"btn btn-dark my-3 mx-3\" onClick={CopyCodeHandler} > Copy Code</button>\r\n      </div>\r\n    <div className=\"container \">\r\n      <h2>Your text summary</h2>\r\n      <p> {text.split(\" \").length-1} words {text.length} charachters</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React , {useState}from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // use state 1\r\n    const [mystyle, setmystyle] = useState({\r\n        color:\"rgb(27 27 27 / 63%)\",\r\n        backgroundColor : \"white\" \r\n    })\r\n\r\n    // usestate 2\r\n    const [firstmode, setfirstmode] = useState(\"Dark Mode\")\r\n\r\n    let toggleHandler= ()=>{\r\n        if (mystyle.color == \"rgb(27 27 27 / 63%)\"){\r\n            setfirstmode(\"Light Mode\");\r\n            setmystyle({\r\n                color :\"white\",\r\n                backgroundColor : \"rgb(27 27 27 / 63%)\"\r\n            })\r\n           \r\n        }\r\n        if (mystyle.color == \"white\"){\r\n            setfirstmode(\"Dark Mode\");\r\n            setmystyle({\r\n                color :\"rgb(27 27 27 / 63%)\",\r\n                backgroundColor : \"white\"\r\n            })\r\n           \r\n        }\r\n\r\n    }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n                <div className=\"accordion\" id=\"accordionExample\"  >\r\n        <div className=\"accordion-item\" style = {mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\"  style = {mystyle}data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style = {mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" style = {mystyle}data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style = {mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" style = {mystyle}data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <button type=\"button\" onClick={toggleHandler} className=\"btn btn-secondary mt-3\">{firstmode}</button>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n","import NavBar from \"./component/NavBar\";\nimport \"./App.css\";\nimport TextForm from \"./component/TextForm\";\nimport React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Routes\n} from \"react-router-dom\";\n\nimport About from \"./component/About\";\n\nfunction App() {\n  return (\n    <>\n<Router>\n<NavBar title=\"TextUtils\" mode=\"light\"/>\n    <Routes>\n      {/* routes instead of switch */}\n      <Route exact path=\"/\" element={<TextForm heading =\"Enter your Text\"></TextForm>}/>\n      <Route path=\"/About\" element={<About mode=\"black\"/>}/>\n    </Routes>\n</Router>\n    \n        {/* <NavBar/> */}\n      \n        \n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}